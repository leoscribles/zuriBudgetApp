database = {}


class Budget:
    def __init__(self, category, amount):
        self.category = category
        self.amount = amount

    def deposit(amount, bal):
        bal += amount
        return bal

    def withdraw(user, amount, bal):
        bal -= amount
        return bal

    def balance(db):
        for categ, bal in db.items():
            print(categ, bal)

    def transfer(db, option1, amount, option2):
        value1 = db[option1]
        value2 = db[option2]

        db[option1] = int(value1) - amount
        db[option2] = int(value2) - amount
        return db

    def init():
        print('Start organizing your life, with one Button \n')
        menu()

    def menu():
        try:
            user = int(input(
                'Select what you want\n1. Create a new budget\n2. Deposit to budget\n3. Withdraw from budget\n4. Check balance of budget\n5. Transfer to budget\n6. Exit\n'))
            if user == 1:
                new_budget()
            elif user == 2:
                credit()
            elif user == 3:
                debit()
            elif user == 4:
                balance()
            elif user == 5:
                transfer()
            elif user == 6:
                out()
            else:
                print('Invalid input. Please try again.\n')
                menu()
        except:
            print('Invalid option selected. Please try again.')
            menu()

    def new_budget():
        budget_title = input('Enter budget name \n')

        try:
            amount = int(input('Enter your budget amount \n$'))
        except:
            print('Invalid input')
            new_budget()

        budget = Budget(budget_title, amount)
        database[budget_title] = amount
        print('')
        print(f'Budget {budget_title} was set up with ${amount}')
        menu()

    def debit():
        for key, value in database.items():
            print(f'- {key}')
        pick = int(input('1. Continue with debit transaction\n2. Stop debit transaction'))
        if pick == 1:
            user = input('Select from one of the aforementioned budgets')
            if user in database:
                print('You cant withdraw everything. At least, $1 must remain.')
                amt = int(input('Input the amount you want to withdraw \n$'))
                if amt < database[user]:
                    balance = int(database[user])
                    new_balance = Budget.withdraw(user, amt, balance)
                    database[user] = new_balance
                    print(f'${amt} has been debited from Budget-{user}\nBudget amount remaining is ${new_balance}')
                    menu()

                else:
                    pick = int(input(f'\n Budget {user} does not exist.\n 1. Creat new budget\n2. Withdraw\n3. Go back\n'))
                    if pick == 1:
                        new_budget()
                    elif pick == 2:
                        debit()
                    elif pick == 3:
                        menu()
                    else:
                        print('Invalid selection')
                        debit()
        elif pick == 2:
            print('You have terminated the debit transaction')
            menu()
        else:
            print('Invalid selection')
            debit()

    def credit():
        for key, value in database.items():
            print(f'- {key}')
        pick = int(input('1. Continue with deposit transaction\n2. Stop deposit transaction'))
        if pick == 1:
            user = input('Select a budget')
            if user in database:
                print('You cant withdraw everything. At least, $1 must remain.')
                amt = int(input('Input the amount you want to withdraw \n$'))
                balance = int(database[user])
                new_balance = Budget.deposit(user, amt, balance)
                database[user] = new_balance
                print(f'${amt} has been credited to Budget-{user}\nCurrent total budget amount is ${new_balance}')
                menu()

            else:
                pick = int(input(f'\n Budget {user} does not exist.\n 1. Creat new budget\n2. Deposit\n3. Go back\n'))
                if pick == 1:
                    new_budget()
                elif pick == 2:
                    credit()
                elif pick == 3:
                    menu()
                else:
                    print('Invalid selection')
                    credit()
        elif pick == 2:
            print('You have terminated the deposit transaction')
            menu()
        else:
            print('Invalid selection')
            debit()

    def balance():
        print('Checking your budget balance...')
        check_bal = Budget.balance(database)
        if check_bal == None:
            print('')
            menu()
        else:
            print(f'${check_bal}')
            menu()

    def transfer():
        print('***Available Budgets***')
        for key, value in database.items():
            print(key)
            print('')
        print('***Transfer Operations***')
        print('NB: You cant withdraw everything. You must leave at least $1\n')
        from_budget = input('Enter the budget you transferring from...\n')
        if from_budget in database:
            from_amount = int(input('Enter the amount you want to transfer \n$'))
            if from_amount < database[from_budget]:
                to_budget = input('Enter the budget you want to transfer to\n')
                if to_budget in database:
                    db = Budget.transfer(database, from_budget, from_amount, to_budget)
                    print('')
                    print(f'You have transfered ${from_amount} from {from_budget} to {to_budget}')
                    for key, value in db.items():
                        print(key, value)
                    menu()
                else:
                    print(f'{from_budget} budget does not exist. Please try again')
                    transfer()
            else:
                print(f'You dont have ${from_amount} in {from_budget}')
                transfer()
        else:
            print(f' Budget {from_budget} does not exist')
            transfer()

    def out():
        quit()


init()






